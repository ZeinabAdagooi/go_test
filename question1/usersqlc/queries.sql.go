// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const cHECKOTPPHONEEXIST = `-- name: CHECKOTPPHONEEXIST :one
SELECT COUNT(id) as x FROM users WHERE phone_number = $1 AND otp = $2
`

type CHECKOTPPHONEEXISTParams struct {
	PhoneNumber string `json:"phone_number"`
	Otp         string `json:"otp"`
}

func (q *Queries) CHECKOTPPHONEEXIST(ctx context.Context, arg CHECKOTPPHONEEXISTParams) (int64, error) {
	row := q.db.QueryRow(ctx, cHECKOTPPHONEEXIST, arg.PhoneNumber, arg.Otp)
	var x int64
	err := row.Scan(&x)
	return x, err
}

const cHECKPHONEEXIST = `-- name: CHECKPHONEEXIST :one
SELECT COUNT(id) as x FROM users WHERE  phone_number = $1
`

func (q *Queries) CHECKPHONEEXIST(ctx context.Context, phoneNumber string) (int64, error) {
	row := q.db.QueryRow(ctx, cHECKPHONEEXIST, phoneNumber)
	var x int64
	err := row.Scan(&x)
	return x, err
}

const checkOTPExist = `-- name: CheckOTPExist :one
SELECT COUNT(id) as x FROM users WHERE  otp = $1
`

func (q *Queries) CheckOTPExist(ctx context.Context, otp string) (int64, error) {
	row := q.db.QueryRow(ctx, checkOTPExist, otp)
	var x int64
	err := row.Scan(&x)
	return x, err
}

const checkOTPExpire = `-- name: CheckOTPExpire :one
SELECT COUNT(id) AS x FROM users WHERE phone_number = $1 AND otp=$2 AND otp_expiration_time >=NOW()
`

type CheckOTPExpireParams struct {
	PhoneNumber string `json:"phone_number"`
	Otp         string `json:"otp"`
}

func (q *Queries) CheckOTPExpire(ctx context.Context, arg CheckOTPExpireParams) (int64, error) {
	row := q.db.QueryRow(ctx, checkOTPExpire, arg.PhoneNumber, arg.Otp)
	var x int64
	err := row.Scan(&x)
	return x, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, phone_number, otp, otp_expiration_time) VALUES ($1, $2, $3, $4) RETURNING id
`

type CreateUserParams struct {
	Name              string           `json:"name"`
	PhoneNumber       string           `json:"phone_number"`
	Otp               string           `json:"otp"`
	OtpExpirationTime pgtype.Timestamp `json:"otp_expiration_time"`
}

// sql/queries.sql
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.PhoneNumber,
		arg.Otp,
		arg.OtpExpirationTime,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteOTP = `-- name: DeleteOTP :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteOTP(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOTP, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, phone_number, otp, otp_expiration_time FROM users WHERE id = $1 LIMIT (1)
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, name, phone_number, otp, otp_expiration_time FROM users WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const isOTPValid = `-- name: IsOTPValid :one
SELECT COUNT(id) AS x FROM users WHERE phone_number = $1 AND otp=$2 AND otp_expiration_time < NOW()
`

type IsOTPValidParams struct {
	PhoneNumber string `json:"phone_number"`
	Otp         string `json:"otp"`
}

func (q *Queries) IsOTPValid(ctx context.Context, arg IsOTPValidParams) (int64, error) {
	row := q.db.QueryRow(ctx, isOTPValid, arg.PhoneNumber, arg.Otp)
	var x int64
	err := row.Scan(&x)
	return x, err
}

const updateOTPByPhoneNumber = `-- name: UpdateOTPByPhoneNumber :one
UPDATE users SET otp = $3 ,otp_expiration_time = $2 WHERE phone_number = $1 RETURNING id, name, phone_number, otp, otp_expiration_time
`

type UpdateOTPByPhoneNumberParams struct {
	PhoneNumber       string           `json:"phone_number"`
	OtpExpirationTime pgtype.Timestamp `json:"otp_expiration_time"`
	Otp               string           `json:"otp"`
}

func (q *Queries) UpdateOTPByPhoneNumber(ctx context.Context, arg UpdateOTPByPhoneNumberParams) (User, error) {
	row := q.db.QueryRow(ctx, updateOTPByPhoneNumber, arg.PhoneNumber, arg.OtpExpirationTime, arg.Otp)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}
